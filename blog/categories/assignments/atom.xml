<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Assignments | Duke PL Course]]></title>
  <link href="http://Duke-PL-Course.github.com/blog/categories/assignments/atom.xml" rel="self"/>
  <link href="http://Duke-PL-Course.github.com/"/>
  <updated>2013-11-05T16:23:20-05:00</updated>
  <id>http://Duke-PL-Course.github.com/</id>
  <author>
    <name><![CDATA[Yang Su, Kevin Gao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prolog Assignment]]></title>
    <link href="http://Duke-PL-Course.github.com/blog/2013/02/26/prolog-assignment/"/>
    <updated>2013-02-26T14:46:00-05:00</updated>
    <id>http://Duke-PL-Course.github.com/blog/2013/02/26/prolog-assignment</id>
    <content type="html"><![CDATA[<p>We have finally finished writing the Prolog assignment. It includes <strong>three</strong> problems, with one optional extension and one bonus problem. The assignment will be due <strong>next Wednesday, March 6 at 11:59PM</strong>.</p>

<p>The assignment document is called <a href="https://github.com/Duke-PL-Course/Prolog/blob/master/2013-02-18-assignment.md">2013-02-18-assignment.md</a> and the skeleton files can be found under the <a href="https://github.com/Duke-PL-Course/Prolog/tree/master/assignments">assignments</a> folder.</p>

<p>Please remember to fork the <a href="https://github.com/Duke-PL-Course/Prolog">Prolog repo</a> and push your solutions to your forked repo. You can always manually submit to the <a href="http://dukeplcourse.com">autograder</a>.</p>

<p>The slides from lecture can be found <a href="/slides/prolog.html">here</a>.</p>

<p>The <a href="https://github.com/Duke-PL-Course/Prolog/blob/master/2013-02-18-assignment.md">Prolog Assignment</a> is now live and complete. </p>

<p>Again, please feel free to post questions on <a href="https://github.com/Duke-PL-Course/Prolog/issues?state=open">issues</a>.</p>

<p>Hope you will find this assignment to be slightly easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Assignment]]></title>
    <link href="http://Duke-PL-Course.github.com/blog/2013/02/07/javascript-assignment/"/>
    <updated>2013-02-07T17:29:00-05:00</updated>
    <id>http://Duke-PL-Course.github.com/blog/2013/02/07/javascript-assignment</id>
    <content type="html"><![CDATA[<p><img src="http://Duke-PL-Course.github.com/images/jslogo.png" alt="JavaScript" style="max-height: 200px; float: left; margin-right: 10px;"></p>

<p>With our last lecture, we have finished the material for JavaScript. The slides from lecture can be found <a href="/slides/javascript.html">here</a>.</p>

<p>The <a href="https://github.com/Duke-PL-Course/JavaScript/blob/master/2013-02-03-assignment.md">JavaScript Assignment</a> is now live and complete. It includes <strong>four</strong> problems, with one bonus problem. The assignment will be due <strong>next Wednesday, February 13 at 11:59PM</strong>.</p>

<p>The assignment document is called <a href="https://github.com/Duke-PL-Course/JavaScript/blob/master/2013-02-03-assignment.md">2013-02-03-assignment.md</a> and the skeleton files can be found under the <a href="https://github.com/Duke-PL-Course/JavaScript/tree/master/assignments">assignments</a> folder.</p>

<p>Please remember to fork the <a href="https://github.com/Duke-PL-Course/JavaScript">JavaScript repo</a> and push your solutions to your forked repo. You can always manually submit to the <a href="http://dukeplcourse.com">autograder</a>.</p>

<p>Again, please feel free to post questions on <a href="https://github.com/Duke-PL-Course/JavaScript/issues?state=open">issues</a>.</p>

<p>Hope you will find this assignment to be slightly easier.</p>

<h2 id="toc_11209">Note About Bonus Problem</h2>

<p>The <a href="https://github.com/Duke-PL-Course/JavaScript/blob/master/2013-02-03-assignment.md#bonus-async-waterfall">waterfall function</a> is part of a very widely used JavaScript Library called <a href="https://github.com/caolan/async">async.js</a>. It helps manage the complexity and callbacks for a series of functions that depend on the result of a previous functions.</p>

<p>A similar function also available in the async library is <a href="https://github.com/caolan/async#paralleltasks-callback">parallel</a>. It allows you to fire off many requests in parallel and collect the results with a single callback function. We mentioned this function in lecture and we have published a simpler version of the parallel function that takes in a hash. Please take a look for reference and hopefully it will help you understand what&#39;s required for the waterfall function</p>

<h2 id="toc_11210">Note about Earlier Forked Repos</h2>

<p>If you forked the repo before we finalized the assignment. Please use the following commands to update your repo:</p>
<div class="highlight"><pre><code class="bash">git remote add upstream git@github.com:Duke-PL-Course/JavaScript.git
git pull --rebase upstream master
</code></pre>
</div>

<p>Let us know if you are having trouble with git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby]]></title>
    <link href="http://Duke-PL-Course.github.com/blog/2013/01/24/ruby-assignment/"/>
    <updated>2013-01-24T02:37:00-05:00</updated>
    <id>http://Duke-PL-Course.github.com/blog/2013/01/24/ruby-assignment</id>
    <content type="html"><![CDATA[<p><img src="http://Duke-PL-Course.github.com/images/Ruby_logo.png" alt="Ruby" style="max-height: 200px; float: left; margin-right: 10px;"></p>

<p>With our last lecture, we have finished the material for Ruby. The slides from lecture can be found <a href="http://duke-pl-course.github.com/slides/ruby.html#1">here</a>.</p>

<p>The <a href="https://github.com/Duke-PL-Course/Ruby/blob/master/2013-01-23-assignment.md">Ruby Assignment</a> is now live. It includes five problems, two of which are from the book. The assignment will be due <strong>next Friday, February 1 at 11:59PM</strong>.</p>

<p>To get started, fork the <a href="https://github.com/Duke-PL-Course/Ruby">Ruby repo</a>, which will create a repo of the same name under your github account. This allows us to keep track of everyone&#39;s progress. Then clone <strong>your own forked repo</strong> and you are ready to go. From there, you can commit and publish your changes.</p>

<p>The assignment document is called <a href="https://github.com/Duke-PL-Course/Ruby/blob/master/2013-01-23-assignment.md">2013-01-23-assignment.md</a> and the skeleton files can be found under the <a href="https://github.com/Duke-PL-Course/Ruby/tree/master/assignments">assignments</a> folder.</p>

<p>You can submit your solution in one of two ways. </p>

<ol>
<li>you can submit your source file directly to the <a href="http://dukeplcourse.com">autograder</a>. The directions for how to use it will be live shortly.</li>
<li>you can keep your code in your own repos. Once the deadline passes, our automated script will get the latest versions of your code and run it against the autograder. So remember to commit often.</li>
</ol>

<p>The solutions to all the book problems except for Tree and CSV are also live. You can find them <a href="https://github.com/Duke-PL-Course/Ruby/blob/master/2013-01-22-book-problems-solution.md">here</a>. </p>

<p>Again, please feel free to post questions on <a href="https://github.com/Duke-PL-Course/Ruby/issues?state=open">issues</a>.</p>
]]></content>
  </entry>
  
</feed>
